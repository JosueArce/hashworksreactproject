{"ast":null,"code":"import axios from 'axios';\nconst NYT_API_KEY = process.env.REACT_APP_NYT_API_KEY || '';\nconst NYT_BOOKS_API_URL = 'https://api.nytimes.com/svc/books/v3/lists/overview.json';\nexport const fetchBookLists = async () => {\n  try {\n    const response = await axios.get(NYT_BOOKS_API_URL, {\n      params: {\n        'api-key': NYT_API_KEY\n      }\n    });\n    // The books are nested in response.data.results.lists[].books\n    return response.data.results.lists;\n  } catch (error) {\n    console.error('Error fetching book lists from NYT:', error);\n    throw error;\n  }\n};\nexport const fetchBookByIsbn = async isbn => {\n  // Since the API does not provide direct lookup by ISBN, we search all books\n  const lists = await fetchBookLists();\n  for (const list of lists) {\n    const found = list.books.find(book => book.primary_isbn13 === isbn);\n    if (found) return found;\n  }\n  return null;\n};","map":{"version":3,"names":["axios","NYT_API_KEY","process","env","REACT_APP_NYT_API_KEY","NYT_BOOKS_API_URL","fetchBookLists","response","get","params","data","results","lists","error","console","fetchBookByIsbn","isbn","list","found","books","find","book","primary_isbn13"],"sources":["/Users/jarce/Documents/Personal/Hashworks/hashworks-react-app/src/api/nyt.ts"],"sourcesContent":["import axios from 'axios';\n\nconst NYT_API_KEY = process.env.REACT_APP_NYT_API_KEY || '';\nconst NYT_BOOKS_API_URL = 'https://api.nytimes.com/svc/books/v3/lists/overview.json';\n\nexport const fetchBookLists = async (): Promise<any[]> => {\n    try {\n        const response = await axios.get(NYT_BOOKS_API_URL, {\n            params: {\n                'api-key': NYT_API_KEY,\n            },\n        });\n        // The books are nested in response.data.results.lists[].books\n        return response.data.results.lists;\n    } catch (error) {\n        console.error('Error fetching book lists from NYT:', error);\n        throw error;\n    }\n};\n\nexport const fetchBookByIsbn = async (isbn: string): Promise<any | null> => {\n    // Since the API does not provide direct lookup by ISBN, we search all books\n    const lists = await fetchBookLists();\n    for (const list of lists) {\n        const found = list.books.find((book: any) => book.primary_isbn13 === isbn);\n        if (found) return found;\n    }\n    return null;\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,IAAI,EAAE;AAC3D,MAAMC,iBAAiB,GAAG,0DAA0D;AAEpF,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAA4B;EACtD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAACH,iBAAiB,EAAE;MAChDI,MAAM,EAAE;QACJ,SAAS,EAAER;MACf;IACJ,CAAC,CAAC;IACF;IACA,OAAOM,QAAQ,CAACG,IAAI,CAACC,OAAO,CAACC,KAAK;EACtC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,eAAe,GAAG,MAAOC,IAAY,IAA0B;EACxE;EACA,MAAMJ,KAAK,GAAG,MAAMN,cAAc,CAAC,CAAC;EACpC,KAAK,MAAMW,IAAI,IAAIL,KAAK,EAAE;IACtB,MAAMM,KAAK,GAAGD,IAAI,CAACE,KAAK,CAACC,IAAI,CAAEC,IAAS,IAAKA,IAAI,CAACC,cAAc,KAAKN,IAAI,CAAC;IAC1E,IAAIE,KAAK,EAAE,OAAOA,KAAK;EAC3B;EACA,OAAO,IAAI;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}